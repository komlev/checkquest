Here are some best practices and rules to follow for creating a high-quality, mobile-first web app with excellent UI/UX using Tailwind, React, nanostores, and DaisyUI:

Mobile-First Design:
Always design and implement for mobile screens first, then scale up to larger screens.
Use Tailwind's responsive prefixes (sm:, md:, lg:, xl:) to adjust layouts for different screen sizes.

Consistent Design System:
Create a design system with consistent colors, typography, spacing, and component styles.
Utilize Tailwind's configuration file (tailwind.config.js) to define your custom design tokens.

Performance Optimization:
Use React.lazy() and Suspense for code-splitting and lazy-loading components.
Implement virtualization for long lists using libraries like react-window.
Optimize images and use next/image for automatic image optimization in Next.js.

Responsive Typography:
Use Tailwind's text utilities with responsive prefixes to adjust font sizes across different screens.
Consider using a fluid typography system for seamless scaling.

Accessibility:
Ensure proper color contrast ratios using Tailwind's text-* and bg-* classes.
Use semantic HTML elements and ARIA attributes where necessary.
Implement keyboard navigation support.

Touch-Friendly UI:
Make interactive elements (buttons, links) at least 44x44 pixels for easy tapping.
Implement touch gestures for common actions (swipe, pinch-to-zoom) where appropriate.

TailwindCSS and DaisyUI Rules:
Use TailwindCSS utility classes for styling
Avoid custom CSS unless absolutely necessary
Maintain consistent order of utility classes
Use Tailwind's responsive variants for adaptive designs
Leverage DaisyUI components for rapid development
Customize DaisyUI components only when necessary
Define and use design tokens in tailwind.config.js

WHEN CREATING A FILE DON'T CONFLICT IT WITH .TSX AND .JSX FILES

Error Handling and Feedback:
Implement proper error boundaries in React.
Provide clear feedback for user actions (loading states, success/error messages).

Animation and Transitions:
Use subtle animations to enhance UX (e.g., page transitions, micro-interactions).
Utilize Tailwind's transition utilities or consider libraries like Framer Motion.

Form Handling:
Use libraries like Formik for efficient form management.
Implement proper form validation with clear error messages.

Code Organization:
Follow a consistent folder structure (e.g., components, hooks, services).
Components folder is structured accoring to the Atomic design principles
00-Atoms - simplest components
01-Molecules - components that are composed of atoms
02-Organisms - components that are composed of molecules which have some logic in them
03-Templates - templates for bigger components
04-Pages - contain application pages

Use custom hooks to encapsulate and reuse logic.

Native-like Features:
Implement pull-to-refresh for content updates.
Use smooth scrolling and momentum scrolling.
Consider using libraries like react-spring for physics-based animations.

Hereâ€™s a concise prompt for a language model to help you with the logic for creating AI-powered medication insights in your app:

Prompt:
Design an application for interview management where interviewer can create checklists and conduct interviews filling those checklists.

The app should:
Allow users to create knowledge bases for conducting interviews. And conduct interviews agains that knowledge base with checklist and scoring functionality. Also to see list of interviews.

User Interface:
Main route is a dashboard with list of interviews. A button to create a new interview.
A route to see knowledge bases list with ability to create a new knowledge base.
Knowledge base page is a page with sections and each section contains list of checklist questions.
Each question has a score.

Interview page is a page with name, summary field, and list of sections with questions.
Checking each question adds to a global score.

This prompt provides a clear and structured request for assistance in developing the feature, focusing on key components and functionality.
